// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package db

import (
	"database/sql/driver"
	"fmt"
	"net/netip"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

type ApiKeyType string

const (
	ApiKeyTypeUser    ApiKeyType = "user"
	ApiKeyTypeTeam    ApiKeyType = "team"
	ApiKeyTypeService ApiKeyType = "service"
)

func (e *ApiKeyType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ApiKeyType(s)
	case string:
		*e = ApiKeyType(s)
	default:
		return fmt.Errorf("unsupported scan type for ApiKeyType: %T", src)
	}
	return nil
}

type NullApiKeyType struct {
	ApiKeyType ApiKeyType `json:"api_key_type"`
	Valid      bool       `json:"valid"` // Valid is true if ApiKeyType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullApiKeyType) Scan(value interface{}) error {
	if value == nil {
		ns.ApiKeyType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ApiKeyType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullApiKeyType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ApiKeyType), nil
}

func (e ApiKeyType) Valid() bool {
	switch e {
	case ApiKeyTypeUser,
		ApiKeyTypeTeam,
		ApiKeyTypeService:
		return true
	}
	return false
}

func AllApiKeyTypeValues() []ApiKeyType {
	return []ApiKeyType{
		ApiKeyTypeUser,
		ApiKeyTypeTeam,
		ApiKeyTypeService,
	}
}

type EnvsetType string

const (
	EnvsetTypePersonal EnvsetType = "personal"
	EnvsetTypeTeam     EnvsetType = "team"
)

func (e *EnvsetType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = EnvsetType(s)
	case string:
		*e = EnvsetType(s)
	default:
		return fmt.Errorf("unsupported scan type for EnvsetType: %T", src)
	}
	return nil
}

type NullEnvsetType struct {
	EnvsetType EnvsetType `json:"envset_type"`
	Valid      bool       `json:"valid"` // Valid is true if EnvsetType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullEnvsetType) Scan(value interface{}) error {
	if value == nil {
		ns.EnvsetType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.EnvsetType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullEnvsetType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.EnvsetType), nil
}

func (e EnvsetType) Valid() bool {
	switch e {
	case EnvsetTypePersonal,
		EnvsetTypeTeam:
		return true
	}
	return false
}

func AllEnvsetTypeValues() []EnvsetType {
	return []EnvsetType{
		EnvsetTypePersonal,
		EnvsetTypeTeam,
	}
}

type TeamRole string

const (
	TeamRoleOwner  TeamRole = "owner"
	TeamRoleAdmin  TeamRole = "admin"
	TeamRoleMember TeamRole = "member"
	TeamRoleViewer TeamRole = "viewer"
)

func (e *TeamRole) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TeamRole(s)
	case string:
		*e = TeamRole(s)
	default:
		return fmt.Errorf("unsupported scan type for TeamRole: %T", src)
	}
	return nil
}

type NullTeamRole struct {
	TeamRole TeamRole `json:"team_role"`
	Valid    bool     `json:"valid"` // Valid is true if TeamRole is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTeamRole) Scan(value interface{}) error {
	if value == nil {
		ns.TeamRole, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TeamRole.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTeamRole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.TeamRole), nil
}

func (e TeamRole) Valid() bool {
	switch e {
	case TeamRoleOwner,
		TeamRoleAdmin,
		TeamRoleMember,
		TeamRoleViewer:
		return true
	}
	return false
}

func AllTeamRoleValues() []TeamRole {
	return []TeamRole{
		TeamRoleOwner,
		TeamRoleAdmin,
		TeamRoleMember,
		TeamRoleViewer,
	}
}

type ApiKey struct {
	ID          uuid.UUID   `db:"id" json:"id"`
	Name        string      `db:"name" json:"name"`
	KeyHash     string      `db:"key_hash" json:"key_hash"`
	KeyPrefix   string      `db:"key_prefix" json:"key_prefix"`
	Type        ApiKeyType  `db:"type" json:"type"`
	OwnerUserID *uuid.UUID  `db:"owner_user_id" json:"owner_user_id"`
	OwnerTeamID *uuid.UUID  `db:"owner_team_id" json:"owner_team_id"`
	Permissions []byte      `db:"permissions" json:"permissions"`
	ExpiresAt   **time.Time `db:"expires_at" json:"expires_at"`
	LastUsedAt  **time.Time `db:"last_used_at" json:"last_used_at"`
	IsActive    *bool       `db:"is_active" json:"is_active"`
	CreatedAt   time.Time   `db:"created_at" json:"created_at"`
	UpdatedAt   time.Time   `db:"updated_at" json:"updated_at"`
}

type AuditLog struct {
	ID           uuid.UUID   `db:"id" json:"id"`
	UserID       *uuid.UUID  `db:"user_id" json:"user_id"`
	ApiKeyID     *uuid.UUID  `db:"api_key_id" json:"api_key_id"`
	Action       string      `db:"action" json:"action"`
	ResourceType string      `db:"resource_type" json:"resource_type"`
	ResourceID   pgtype.UUID `db:"resource_id" json:"resource_id"`
	OldValues    []byte      `db:"old_values" json:"old_values"`
	NewValues    []byte      `db:"new_values" json:"new_values"`
	IpAddress    *netip.Addr `db:"ip_address" json:"ip_address"`
	UserAgent    *string     `db:"user_agent" json:"user_agent"`
	CreatedAt    time.Time   `db:"created_at" json:"created_at"`
}

type EnvVariable struct {
	ID             uuid.UUID `db:"id" json:"id"`
	EnvsetID       uuid.UUID `db:"envset_id" json:"envset_id"`
	Key            string    `db:"key" json:"key"`
	EncryptedValue string    `db:"encrypted_value" json:"encrypted_value"`
	Description    *string   `db:"description" json:"description"`
	IsSensitive    *bool     `db:"is_sensitive" json:"is_sensitive"`
	CreatedAt      time.Time `db:"created_at" json:"created_at"`
	UpdatedAt      time.Time `db:"updated_at" json:"updated_at"`
}

type Environment struct {
	ID          uuid.UUID `db:"id" json:"id"`
	ProjectID   uuid.UUID `db:"project_id" json:"project_id"`
	Name        string    `db:"name" json:"name"`
	Description *string   `db:"description" json:"description"`
	IsActive    *bool     `db:"is_active" json:"is_active"`
	CreatedAt   time.Time `db:"created_at" json:"created_at"`
	UpdatedAt   time.Time `db:"updated_at" json:"updated_at"`
}

type Envset struct {
	ID            uuid.UUID   `db:"id" json:"id"`
	Name          string      `db:"name" json:"name"`
	Description   *string     `db:"description" json:"description"`
	Type          EnvsetType  `db:"type" json:"type"`
	OwnerUserID   *uuid.UUID  `db:"owner_user_id" json:"owner_user_id"`
	OwnerTeamID   *uuid.UUID  `db:"owner_team_id" json:"owner_team_id"`
	EnvironmentID uuid.UUID   `db:"environment_id" json:"environment_id"`
	IsActive      *bool       `db:"is_active" json:"is_active"`
	CreatedAt     time.Time   `db:"created_at" json:"created_at"`
	UpdatedAt     time.Time   `db:"updated_at" json:"updated_at"`
	DeletedAt     **time.Time `db:"deleted_at" json:"deleted_at"`
}

type Project struct {
	ID              uuid.UUID   `db:"id" json:"id"`
	Name            string      `db:"name" json:"name"`
	Description     *string     `db:"description" json:"description"`
	TeamID          *uuid.UUID  `db:"team_id" json:"team_id"`
	CreatedByUserID uuid.UUID   `db:"created_by_user_id" json:"created_by_user_id"`
	IsActive        *bool       `db:"is_active" json:"is_active"`
	CreatedAt       time.Time   `db:"created_at" json:"created_at"`
	UpdatedAt       time.Time   `db:"updated_at" json:"updated_at"`
	DeletedAt       **time.Time `db:"deleted_at" json:"deleted_at"`
}

type Team struct {
	ID              uuid.UUID   `db:"id" json:"id"`
	Name            string      `db:"name" json:"name"`
	Description     *string     `db:"description" json:"description"`
	CreatedByUserID uuid.UUID   `db:"created_by_user_id" json:"created_by_user_id"`
	IsActive        *bool       `db:"is_active" json:"is_active"`
	CreatedAt       time.Time   `db:"created_at" json:"created_at"`
	UpdatedAt       time.Time   `db:"updated_at" json:"updated_at"`
	DeletedAt       **time.Time `db:"deleted_at" json:"deleted_at"`
}

type User struct {
	ID           uuid.UUID   `db:"id" json:"id"`
	Email        string      `db:"email" json:"email"`
	Username     string      `db:"username" json:"username"`
	PasswordHash string      `db:"password_hash" json:"password_hash"`
	FirstName    *string     `db:"first_name" json:"first_name"`
	LastName     *string     `db:"last_name" json:"last_name"`
	IsActive     *bool       `db:"is_active" json:"is_active"`
	CreatedAt    time.Time   `db:"created_at" json:"created_at"`
	UpdatedAt    time.Time   `db:"updated_at" json:"updated_at"`
	DeletedAt    **time.Time `db:"deleted_at" json:"deleted_at"`
}

type UserTeam struct {
	ID        uuid.UUID `db:"id" json:"id"`
	UserID    uuid.UUID `db:"user_id" json:"user_id"`
	TeamID    uuid.UUID `db:"team_id" json:"team_id"`
	Role      TeamRole  `db:"role" json:"role"`
	CreatedAt time.Time `db:"created_at" json:"created_at"`
	UpdatedAt time.Time `db:"updated_at" json:"updated_at"`
}
