// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const countUsers = `-- name: CountUsers :one
SELECT COUNT(*) FROM users
WHERE deleted_at IS NULL
`

// Count Active Users
func (q *Queries) CountUsers(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countUsers)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (email, username, password_hash, first_name, last_name)
VALUES ($1, $2, $3, $4, $5)
    RETURNING id, email, username, password_hash, first_name, last_name, is_active, created_at, updated_at, deleted_at
`

type CreateUserParams struct {
	Email        string  `db:"email" json:"email"`
	Username     string  `db:"username" json:"username"`
	PasswordHash string  `db:"password_hash" json:"password_hash"`
	FirstName    *string `db:"first_name" json:"first_name"`
	LastName     *string `db:"last_name" json:"last_name"`
}

// User Creation
func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Email,
		arg.Username,
		arg.PasswordHash,
		arg.FirstName,
		arg.LastName,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.PasswordHash,
		&i.FirstName,
		&i.LastName,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deactivateUser = `-- name: DeactivateUser :exec
UPDATE users
SET
    is_active = false,
    updated_at = NOW()
WHERE id = $1 AND deleted_at IS NULL
`

// Deactivate User (soft delete)
func (q *Queries) DeactivateUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deactivateUser, id)
	return err
}

const emailExists = `-- name: EmailExists :one
SELECT EXISTS(
    SELECT 1 FROM users
    WHERE email = $1 AND deleted_at IS NULL
)
`

// Check if Email Exists
func (q *Queries) EmailExists(ctx context.Context, email string) (bool, error) {
	row := q.db.QueryRow(ctx, emailExists, email)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, username, password_hash, first_name, last_name, is_active, created_at, updated_at, deleted_at FROM users
WHERE email = $1 AND deleted_at IS NULL
`

// User Retrieval by Email (for login)
func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.PasswordHash,
		&i.FirstName,
		&i.LastName,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, email, username, password_hash, first_name, last_name, is_active, created_at, updated_at, deleted_at FROM users
WHERE id = $1 AND deleted_at IS NULL
`

// User Retrieval by ID
func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.PasswordHash,
		&i.FirstName,
		&i.LastName,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, email, username, password_hash, first_name, last_name, is_active, created_at, updated_at, deleted_at FROM users
WHERE username = $1 AND deleted_at IS NULL
`

// User Retrieval by Username
func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.PasswordHash,
		&i.FirstName,
		&i.LastName,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, email, username, password_hash, first_name, last_name, is_active, created_at, updated_at, deleted_at FROM users
WHERE deleted_at IS NULL
ORDER BY created_at DESC
    LIMIT $1 OFFSET $2
`

type ListUsersParams struct {
	Limit  int32 `db:"limit" json:"limit"`
	Offset int32 `db:"offset" json:"offset"`
}

// List All Active Users (with pagination)
func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Username,
			&i.PasswordHash,
			&i.FirstName,
			&i.LastName,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const reactivateUser = `-- name: ReactivateUser :exec
UPDATE users
SET
    is_active = true,
    updated_at = NOW()
WHERE id = $1 AND deleted_at IS NULL
`

// Reactivate User
func (q *Queries) ReactivateUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, reactivateUser, id)
	return err
}

const searchUsers = `-- name: SearchUsers :many
SELECT id, email, username, password_hash, first_name, last_name, is_active, created_at, updated_at, deleted_at FROM users
WHERE deleted_at IS NULL
  AND (
    first_name ILIKE '%' || $1 || '%' OR
    last_name ILIKE '%' || $1 || '%' OR
    email ILIKE '%' || $1 || '%' OR
    username ILIKE '%' || $1 || '%'
    )
ORDER BY created_at DESC
    LIMIT $2 OFFSET $3
`

type SearchUsersParams struct {
	Column1 *string `db:"column_1" json:"column_1"`
	Limit   int32   `db:"limit" json:"limit"`
	Offset  int32   `db:"offset" json:"offset"`
}

// Search Users by Name or Email
func (q *Queries) SearchUsers(ctx context.Context, arg SearchUsersParams) ([]User, error) {
	rows, err := q.db.Query(ctx, searchUsers, arg.Column1, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Username,
			&i.PasswordHash,
			&i.FirstName,
			&i.LastName,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const softDeleteUser = `-- name: SoftDeleteUser :exec
UPDATE users
SET
    deleted_at = NOW(),
    updated_at = NOW()
WHERE id = $1
`

// Soft Delete User
func (q *Queries) SoftDeleteUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, softDeleteUser, id)
	return err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET
    email = $2,
    username = $3,
    first_name = $4,
    last_name = $5,
    updated_at = NOW()
WHERE id = $1 AND deleted_at IS NULL
    RETURNING id, email, username, password_hash, first_name, last_name, is_active, created_at, updated_at, deleted_at
`

type UpdateUserParams struct {
	ID        uuid.UUID `db:"id" json:"id"`
	Email     string    `db:"email" json:"email"`
	Username  string    `db:"username" json:"username"`
	FirstName *string   `db:"first_name" json:"first_name"`
	LastName  *string   `db:"last_name" json:"last_name"`
}

// Update User Profile
func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.ID,
		arg.Email,
		arg.Username,
		arg.FirstName,
		arg.LastName,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.PasswordHash,
		&i.FirstName,
		&i.LastName,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const updateUserPassword = `-- name: UpdateUserPassword :exec
UPDATE users
SET
    password_hash = $2,
    updated_at = NOW()
WHERE id = $1 AND deleted_at IS NULL
`

type UpdateUserPasswordParams struct {
	ID           uuid.UUID `db:"id" json:"id"`
	PasswordHash string    `db:"password_hash" json:"password_hash"`
}

// Update User Password
func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) error {
	_, err := q.db.Exec(ctx, updateUserPassword, arg.ID, arg.PasswordHash)
	return err
}

const usernameExists = `-- name: UsernameExists :one
SELECT EXISTS(
    SELECT 1 FROM users
    WHERE username = $1 AND deleted_at IS NULL
)
`

// Check if Username Exists
func (q *Queries) UsernameExists(ctx context.Context, username string) (bool, error) {
	row := q.db.QueryRow(ctx, usernameExists, username)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}
